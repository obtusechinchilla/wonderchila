//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.18444
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Xml;
using System.Collections.Generic;
using UnityEngine;

namespace MapReader
{
	public class MapObject {

		public int x;
		public int y;
		public int width;
		public int height;
        public string type;
        public string name;

        public Dictionary<String, String> properties;

		public MapObject (XmlNode node) {
            properties = new Dictionary<String, String>();

			this.x = int.Parse(node.Attributes["x"].Value);
			this.y = int.Parse(node.Attributes["y"].Value);
			this.width = int.Parse(node.Attributes["width"].Value);
			this.height = int.Parse(node.Attributes["height"].Value);

            foreach (XmlAttribute item in node.Attributes)
            {
                if (item.LocalName == "type")
                {
                    type = node.Attributes["type"].Value;
                }
                else if (item.LocalName == "name")
                {
                    name = node.Attributes["name"].Value;
                }
            }

            XmlNode propertiesNode = node.SelectSingleNode("properties");
            if (propertiesNode != null)
            {
                XmlNodeList propertyNodes = propertiesNode.SelectNodes("property");
                if (propertyNodes != null)
                {
                    foreach (XmlNode pNode in propertyNodes)
                    {
                        String name = pNode.Attributes["name"].Value;
                        String value = pNode.Attributes["value"].Value;

                        properties.Add(name, value);
                    }
                }
            }
		}

        public string GetProperty(string key)
        {
            if (properties.ContainsKey(key))
                return properties[key];
            return null;
        }
	}
}

